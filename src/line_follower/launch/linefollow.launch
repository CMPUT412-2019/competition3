<launch>
    <arg name="in_simulator" default="false" />

     <!-- Convert odometry to Pose2D -->
    <node pkg="kobuki_node" type="getOdom2D.py" name="getOdom2D">
        <remap from="mobile_base/odom" to="mobile_base/odom" />
        <remap from="pose2d" to="/pose2d" />
    </node>

    <!-- Service to convert between camera pixels and real-world points -->
    <node pkg="line_follower" type="cam_pixel_to_point.py" name="cam_pixel_to_point">
        <remap from="camera_depth_image" to="/camera/depth/image_raw" if="$(arg in_simulator)" />
        <remap from="camera_depth_image" to="/camera/depth_registered/image_raw" unless="$(arg in_simulator)" />
        <remap from="camera_info" to="/camera/rgb/camera_info" />
        <remap from="cam_pixel_to_point" to="cam_pixel_to_point" />
    </node>

    <node pkg="line_follower" type="competition2.py" name="line_follower" output="screen" />

    <include file="$(find turtlebot_bringup)/launch/minimal.launch" unless="$(arg in_simulator)" />
    <include file="$(find openni2_launch)/launch/openni2.launch" unless="$(arg in_simulator)" >
        <arg name="publish_tf" value="false" />
    </include>

    <node pkg="usb_cam" type="usb_cam_node" name="usb_cam_node" unless="$(arg in_simulator)" >
        <param name="video_device" value="/dev/video2"/>
        <remap from="usb_cam_node/image_raw" to="/bottom_camera/image_raw" />
    </node>

    <!-- Convert camera to laser scan -->
    <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan" unless="$(arg in_simulator)" >
        <remap from="image" to="/camera/depth/image_raw" />
        <remap from="camera_info" to="/camera/depth/camera_info" />
        <remap from="scan" to="/scan" />
    </node>
</launch>
